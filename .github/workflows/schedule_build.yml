name: Schedule Build Lean's OpenWrt

on:
  # 每个月1号自动构建
  schedule:
    - cron: 0 0 1 * *
  push:
    branches:
      master
    paths:
      - ".github/workflows/schedule_build.yml"

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE_URL: https://raw.githubusercontent.com/esirplayground/AutoBuild-OpenWrt/master/x86_64.config
  DIY_SH: diy.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_COWTRANSFER: true
  TZ: Asia/Shanghai
  REPOSITORY: crazygit/lean-openwrt-x86-64

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc

    - name: Clone source code
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        wget -q $CONFIG_FILE_URL -O openwrt/.config
        # 添加自定义的target选项,并删除一些无用的配置项
        grep "CONFIG_TARGET_ROOTFS_TARGZ=y" openwrt/.config || echo 'CONFIG_TARGET_ROOTFS_TARGZ=y' >> openwrt/.config
        sed -i '/CONFIG_KERNEL_BUILD_USER/d' openwrt/.config
        sed -i '/CONFIG_GRUB_TITLE/d' openwrt/.config
        cat openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH

    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true'

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin
        path: openwrt/bin

      # 目录结构
      # openwrt/bin/targets/x86/64/config.seed
      # openwrt/bin/targets/x86/64/openwrt-x86-64-combined-squashfs.img
      # openwrt/bin/targets/x86/64/openwrt-x86-64-combined-squashfs.vmdk
      # openwrt/bin/targets/x86/64/openwrt-x86-64-generic-rootfs.tar.gz
      # openwrt/bin/targets/x86/64/openwrt-x86-64-generic.manifest
      # openwrt/bin/targets/x86/64/openwrt-x86-64-rootfs-squashfs.img
      # openwrt/bin/targets/x86/64/openwrt-x86-64-vmlinuz
      # openwrt/bin/targets/x86/64/sha256sums
    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      if: env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL https://git.io/cowtransfer | sh
        ./cowtransfer-uploader -b 2621440 -s -p 99 -t 3 --hash --silent ${FIRMWARE}

    # action不稳定，有时间要报could not read Username for 'https://github.com',采用自己下载的方式
    #- name: Download Build Dockerfile
    #  uses: actions/checkout@v2
    #  with:
    #    repository: crazygit/openwrt-x86-64
    #    ref: master
    #    path: dockerfile_dir

    - name: Prepare build docker image dir
      run: |
        git clone --depth 1 https://github.com/crazygit/openwrt-x86-64.git -b master dockerfile_dir
        cp openwrt/bin/targets/x86/64/openwrt-x86-64-generic-rootfs.tar.gz dockerfile_dir/openwrt.tar.gz

    - name: Publish to Registry
      uses: elgohr/Publish-Docker-Github-Action@master
      env:
        FIRMWARE: openwrt.tar.gz
      with:
        workdir: dockerfile_dir
        name: ${{ env.REPOSITORY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
        buildargs: FIRMWARE
        snapshot: true
